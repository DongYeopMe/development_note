목차

- 트랜잭션과 락 : JPA가 제공하는 트랜잭션과 락 기능을 다룬다.
- 2차 캐시 : JPA가 제공하는 애플리케이션 범위 캐시를 다룬다.

# 트랜잭션과 락

## 트랜잭션과 격리 수준

트랜잭션은 ACID를 보장해야 합니다

- 원자성(Atomicity)
- 일관성(Consistency)
- 격리성(Isolation)
- 지속성(Durability)

### ACID

원자성 : 트랜잭션 내에서 실행한 작업들은 마치 하나의 작업인 것처럼 모두 성공하든가 모두 실패해야 한다.

일관성 : 모든 트랜잭션은 일관성 있는 데이터베이스 상태를 유지해야 한다.

격리성 : 동시에 실행되는 트랜잭션들이 서로 에게 영향을 미치지 않게 격리해야 한다.

지속성 : 트랜잭션을 성공적으로 끝내면 그 결과가 항상 기록되어야 하며 중간에 시스템에 문제가 발생해도 데이터베이스 로그 등을 사용해서 성공한 트랜잭션 내용을 복구해야 한다.

문제는 격리성인데 트랜잭션 간에 격리성을 완벽히 보장하려면 트랜잭션을 거의 차례대로 실행해야 한다.

이렇게 하면 동시성 처리 성능이 매우 나빠져 이런 문제로 인해 ANSI 표준은 트랜잭션의 격리 수준을 4단계로 나누어 정의했다.

### 트랜잭션 격리 수준

트랜잭션 격리 수준은

- READ UNCOMMITTED(커밋되지 않은 읽기)
- READ COMMITTED(커밋된 읽기)
- REPEATABLE READ(반복 가능한 읽기)
- SERIALIZABLE(직렬화 기능)

READ UNCOMMITTED 격리 수준이 가장 낮고 SERIALIZABLE의 격리 수준이 가장 높다.

격리 수준이 낮을수록 동시성은 증가하지만 격리 수준에 따른 다양한 문제가 발생한다.

문제점을 표로 정리 하자면

| 격리 수준 | DIRTY READ | NON-REPEATABLE READ | PHANTOM READ |
| --- | --- | --- | --- |
| READ UNCOMMITTED | O | O | O |
| READ COMITTED |  | O | O |
| REPEATABLE READ |  |  | O |
| SERIALIZABLE |  |  |  |
1. READ UNCOMMITTED
    - 커밋하지 않은 데이터를 읽을 수 있다.
    - 트랜잭션1번이 데이터를 수정 하고 있는데, 커밋하지 않아도 트랜잭션 2번이 수정중인 데이터를 조회할 수 있다.(DIRTY READ 문제)
    - 그래서 2번이 DIRTY READ한 데이터를 사용하는데 트랜잭션1번이 롤백하면 데이터 적합성에 심각한 문제가 발생할 수 있다.
2. READ COMMITED 
    - 커밋한 데이터만 읽을 수 있다. → DIRTY READ가 발생 하지 않는다.
    - 하지만 NON-REPEATABLE READ 는 발생할 수 있다.
    - 트랜잭션 1번이 회원 A를 조회중 인데 갑자기 트랜잭션 2번이 회원 A를 수정하고 커밋하면, 트랜잭션 1번이 회원 A를 조회했을때 수정된 데이터가 조회된다.
    - NON-REPEATABLE READ : 반복해서 같은 데이터를 얻을 수 없는 상태
3. REPEATABLE READ
    - 한번 조회한 데이터를 반복해서 조회해도 같은 데이터가 조회된다.
    - 하지만 PHANTOM READ가 발생할 수 있다.
    - 트랜잭션 1번이 10살 이하의 회원을 조회했을때 회원 하나가 추가된 상태로 조회된다.
    - PHANTOM READ : 반복 조회시 결과 집합이 달라지는 것
4. SERIALIZABLE
    - 가장 엄격한 트랜잭션
    - 여기서 PHANTOM READ가 발생하지 않는다.
    - 동시성 처리 성능이 급격히 떨어질 수 있다.

애플리케이션 대부분은 동시성 처리가 중요하기에 데이터베이스들은 보통 READCOMMITED 격리 수준을 기본으로 사용한다.

만약 일부 비즈니스 로직에 더 높은 격리 수준이 필요하면 데이터베이스 트랜잭션이 제공하는 잠금 기능을 사용하면 된다.

## 낙관적 락과 비낙관적 락

JPA의 영속성 컨텍스트(1차 캐시)를 적절히 활용하면 데이터베이스 트랜잭션이 READ COMMITED 격리 수준 이어도 애플리케이션 레벨에서 반복 가능한 읽기가 가능하다.(엔티티가 아닌 스칼라 값을 직접 조회 하면 X)

JPA는 데이터베이스 트랜잭션 격리 수준을 READ COMMITED 정도로 가정한다.

만약에 일부 로직에 더 높은 격리 수준이 필요하면 낙관적,비관적 락 둘중 하나를 사용 하면 된다.

### 낙관적 락

- 이름 그대로 트랜잭션 대부분은 충돌이 발생하지 않는다고 낙관적으로 가정하는 기법이다.
- 데이터베이스가 제공하는 락이 아니라, JPA가 제공하는 버전 관리 기능을 사용한다.
- 낙관적 락은 트랜잭션을 커밋하기 전까지는 트랜잭션의 충돌 여부를 확인할 수 없다.

### 비낙관적 락

- 이름 그대로 트랜잭션의 충돌이 발생한다고 가정하고 우선 락을 걸고 보는 기법이다.
- 데이터베이스가 제공하는 락 기능을 사용한다.
- 대표적으로 `select for udpate` 구문이 있다.

데이터베이스 트랜잭션 범위를 넘어서는 문제가 있다. 예를 들어

사용자 A와 사용자 B가 동시에 제목이 같은 공지사항을 수정한다 했을때,

수정중에 A가 먼저 수정을 하고 그다음 B가 수정했을때 A 수정사항은 없어지고 B 수정사항만 남게 된다

이게 두번의 갱신 분실 문제라 한다.

이문제는 데이터베이스 트랜잭션 범위를 넘어 선다. 그래서 트랜잭션만으로 문제를 해결할 수 없다.

해결책은 

- 마지막 커밋만 인정하기: 사용자 A의 내용은 무시한다. (주로 사용됨.)
- 최초 커밋만 인정하기: 사용자 B가 수정을 완료할 때 오류가 발생한다. (JPA의 버전 관리 기능 사용하여 구현 가능.)
- 충돌하는 갱신 내용 병합하기: 사용자 A와 사용자 B의 수정 사항을 병합한다.

### @Version

JPA가 제공하는 낙관적 락을 사용하려면 @Version을 사용해 버전관리 기능을 추가해야한다.

@Version 적용 가능 타입은

- Long(long)
- Integer(int)
- Short(short)
- Timestamp

```java
@Entity
public class Board {

    @Id
    @GeneratedValue
    private Integer id;

    private String title;

    @Version // Long, Integer, Short, Timestamp에만 적용 가능.
    private Integer version;
}
```

이렇게 버전 관리 기능을 추가 하면 엔티티를 수정 할때마다 버전이 하나씩 자동으로 증가한다.

그리고 엔티티를 수정할 때 조회시점의 버전과 수정 시점의 버전이 다르면 예외 발생한다.

→ 트랜잭션 1이 조회한 엔티티를 수정 하고 있는데 트랜잭션 2 에서 같은 엔티티를 수정하고 커밋해서 버전을 증가하면  트랜잭션 1이 커밋할 때 버전 정보가 다르므로 오류가 발생한다.

![image](https://github.com/mo2-Study-Group/StudyGroup/assets/70151275/73b4a1f1-9314-42aa-8139-fc46e15db5c4)

버전 정보를 사용하면 최초 커밋만 인정하기가 적용된다. 트랜잭션 2가 커밋을 반영하고 나면 버전이 증가되므로 트랜잭션 1은 커밋을 수행할 수 없기 때문이다.

### 버전 비교

엔티티를 수정하고 트랜잭션을 커밋하면 영속성 컨텍스트를 플러시 하면서 update 쿼리를 싱행한다. 이때 버전을 사용하는 엔티티면 검색 조건에 엔티티 버전 정보를 추가한다.

```java
UPDATE BOARD
SET
	TITLE=?
    VERSION=? (버전+1 증가)
WHERE
	ID=?
    AND VERSION=? (버전 비교)
```

데이터베이스 버전과 엔티티 버전이 같으면 데이터를 수정하면서 동시에 버전도 하나 증가하는 방식으로 쿼리가 작성되어 있다. 

버전은 엔티티의 값을 변경할 때 증가하며, 연관 관계 필드의 경우 외래 키를 관리하는 연관 관계의 주인 필드를 수정할 때만 버전이 증가한다.

### JPA 락 사용

락은 다음 위치에 적용할 수 있다.

- EntityManager.lock(), EntityManager.find(), EntityManager.refresh()
- Query.setLockMode()
- @NamedQuery

JPA가 제공하는 락 옵션은 `javax.persistence.LockModeType` 에 정의되어 있으며,

LockModeType의 속성

| 락 모드 | 타입 | 설명 |
| --- | --- | --- |
| 낙관전 락 | OPTIMISTIC | 낙관적 락을 사용한다. |
| 낙관전 락 | OPTIMISTIC_FORCE_INCREMENT | 낙관적 락+버전 정보를 강제로 증가한다. |
| 비관적 락 | PESSIMISTIC_READ | 비관적 락, 읽기 락을 사용한다. |
| 비관적 락 | PESSIMISTIC_WRITE | 비관적 락, 쓰기 락을 사용한다. |
| 비관적 락 | PESSIMISTIC_FORCE_INCREMENT | 비관적 락+버전 정보를 강제로 증가한다. |
| 기타 | NONE | 락을 걸지 않는다. |
| 기타 | READ | JPA 1.0 호환 기능이다. OPTIMISTIC과 같으므로 OPTIMISTIC을 사용하면 된다. |
| 기타 | WRITE | JPA 1.0 호환 기능이다. OPTIMISTIC_FORCE_INCREMENT과 같다. |

### JPA 낙관적 락

@ Version을 사용해야 하고, 해당 어노테이션만 있어도 자동으로 낙관적 락이 적용된다. 락 옵션을 사용하면 락을 더 세밀하게 제어할 수 있다.

옵션

**NONE**

락은 옵션을 지정하지 않아도 엔티티에 @Version이 적용된 필드만 있으면 낙관적 락이 적용된다.

용도는 

- 조회한 엔티티를 수정할 때 다른 트랜잭션에 의해 변경되지 않게 한다.
- 엔티티를 수정할 때 버전을 체크하면서 버전을 증가한다. 이때 데이터베이스의 버전 값이 현재 버전과 다르면 예외가 발생한다.
- 두번의 갱신 분실 문제를 예방한다.

**OPTIMISTIC**

![image](https://github.com/mo2-Study-Group/StudyGroup/assets/70151275/a77776a4-71fb-4295-a44a-28ee819b4aca)

@Version만 적용했을 때는 엔티티를 수정해야 버전을 체크하지만, 이 옵션을 추가하면 엔티티를 조회만 해도 버전을 체크한다.

용도는

- 조회한 엔티티를 트랜잭션이 끝날 때까지 다른 트랜잭션에 의해 변경되지 않게 한다.
- 트랜잭션을 커밋할 때 버전 정보를 조회해서 현재 엔티티의 버전과 같은지 검증한다.
- DIRTY READ와 NON-REPEATABLE READ 문제를 방지한다.

**OPTIMISTIC_FORCE_INCREMENT**

![image](https://github.com/mo2-Study-Group/StudyGroup/assets/70151275/26627ef3-f179-435a-b40c-c6a967b56814)

낙관적 락을 사용하면서 버전 정보를 강제로 증가한다.

용도는

- 논리적인 단위의 엔티티 묶음을 관리할 수 있다

→ 게시물,첨부파일 1:N,N:1 양방향이고 첨부파일이 관계 주인이면, 게시물을 수정하는 데 단순히 첨부 파일만 추가하면 게시물의 버전은 증가하지 않을 것이다. 하지만, 해당 게시물은 물리적으로 변경되지 않았어도 논리적으로는 변경되었다.

이때 게시물의 버전도 강제로 증가 시키고 싶을때 사용.

- 엔티티를 수정하지 않아도 트랜잭션을 커밋할 때 UPDATE 쿼리를 사용해서 버전 정보를 강제로 증가시킨다.
- 강제로 버전을 증가해서 논리적인 단위의 엔티티 묶음을 버전 관리할 수 있다.

### JPA 비낙관적 락

JPA가 제공하는 비낙관적 락은 데이터베이스 트랜잭션 락 메커니즘에 의존하는 방법이다. 

주로 SQL 쿼리에 `select for update`구문을 사용하면서 시작하고 버전 정보는 사용하지 않는다.

특징은 비낙관적 락은 스칼라 타입을 조회할 때도 사용할 수 있고, 데이터를 수정하는 즉시 트랜잭션 충돌을 감지할 수 있다는 장점이 있다.

예외는

- `javax.persistence.PessimisticLockException`  : JPA 예외
- `org.springframework.dao.PessimisticLockingFailureException` : 스프링 예외 추상화

옵션

**PESSIMISTIC_WRITE**

비관적 락하면 이 옵션을 많이 쓰고, 데이터베이스에 쓰기 락을 걸때 사용한다.

- 용도 : 데이트베이스에 쓰기 락을 건다.
- 동작 : 데이터베이스에 `select for update` 를 사용해서 락을 건다.

장점은 `NON-REPEATABLE READ`를 방지한다. 락이 걸린 로우는 다른 트랜잭션이 수정할 수 없다.

**PESSIMISTIC_READ**

데이터를 반복 일기만 하고 수정하지 않는 용도로 락을 걸 때 사용한다. 일반적으로 잘 사용하지 않는다. 데이터베이스의 대부분은 방언에 의해 PESSIMISTIC_WRITE으로 동작한다.

**PESSIMISTIC_FORCE_INCREMENT**

비낙관적 락중 유일하게 버전 정보를 사용하며, 강제로 버전 정보를 증가시킨다.

하이버네이트는 nowait를 지원하는 데이터베이스에 대해서 `for update nowait`옵션을 적용한다.

<aside>
💡 nowait : 오라클 데이터베이스 에서 사용되는 옵션중 하나인데, 데이터베이스 리소스를 얻으려는 시도가 만약 해당 리소스가 현재 사용 중이라서 즉시 사용할 수 없다면, 대기하지 않고 즉시 오류를 반환하도록 지시하는 데 사용됩니다.

</aside>

- 오라클: for update nowait
- PostgreSQL: for update nowait
- 그 외(nowait 지원 하지않으면): for update

**비관적 락과 타임아웃**

- 비관적 락을 사용하면 락을 획득할 때까지 트랜잭션이 대기한다.
- 무한정 기다릴 수는 없으므로 타임아웃 시간을 줄 수 있다.
- 타임아웃은 데이터베이스 특성에 따라 동작하지 않을 수 있다.

# 2차 캐시

## 1차캐시와 2차캐시

### 1차 캐시

![image](https://github.com/mo2-Study-Group/StudyGroup/assets/70151275/d389a996-294f-43a8-ae69-933f55caf4dc)

동작 과정 (그림)

1. 최초 조회할 때는 1차 캐시에 엔티티가 없으므로
2. 데이터베이스에서 엔티티를 조회해서
3. 1차 캐시에 보관하고
4. 1차 캐시에 보관한 결과를 반환한다.
5. 이후 같은 엔티티를 조회하면 1차 캐시에 같은 엔티티가 있으므로 데이터베이스를 조회하지 않고 1차 캐시의 엔티티를 그대로 반환한다.

1차캐시는 같은 엔티티가 있으면 해당 엔티티를 그대로 반환해 동일성을 보장하고, 기본적으로 영속성 컨텍스트 범위의 캐시다.

물론 컨테이너 환경에선 트랜잭션 범위의 캐시, OSIV를 적용하면 요청 범위 캐시

### 2차 캐시

애플리케이션 범위의 캐시이며, 애플리케이션을 종료할 때까지 캐시가 유지된다. 

2차캐시를 적용하면 엔티티 매니저를 통해 데이터를 조회할 때 우선 2차 캐시에서 찾고, 없으면 DB에서 찾는다.

![image](https://github.com/mo2-Study-Group/StudyGroup/assets/70151275/67983917-516a-45a7-8fc3-80e7ec94b673)

동작 과정(그림)

1. 영속성 컨텍스트는 엔티티가 필요하면 2차 캐시를 조회한다.
2. 2차 캐시에 엔티티가 없으면 데이터베이스를 조회해서
3. 결과를 2차 캐시에 보관한다.
4. 2차 캐시는 자신이 보관하고 있는 엔티티를 복사해서 반환한다.

그후  2차 캐시에 저장되어 있는 엔티티를 조회하면 복사본을 만들어 반환한다.

특징으로는

- 영속성 유닛 범위 캐시다.
- 조회한 객체를 그대로 반환하는 게 아니라 복사본을 반환한다.
- 2차 캐시는 DB 키를 기준으로 캐시하지만, 영속성 컨텍스트가 다르면 객체의 동일성을 보장하지 않는다.

## JPA 2차 캐시 기능

### 캐시 모드 설정

```java
@Cacheable // 기본 값 true. false로 지정하면 2차 캐시 x
@Entity
public class Member {

    @Id
    @GeneratedValue
    private Long id;

    ...
}
```

이렇게 캐시를 사용할 엔티티에 @Cacheable을 붙여 주고, 설정 파일에서 ShardCacheMode 값을 정해주면 된다.

```java
<persistence-unit name="test">//여기
	<shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>
</persistence-unit>
```

이렇게 persitence.xml에 shared-cache-mode를 설정해 애플리케이션 전체 즉 영속성 유닛 단위에 캐시를 어떻게 적용할 지 옵션을 설정해야한다.

만약 스프링 프레임워크를 사용할땐 이렇게 설정한다.

```java
<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	<property name="sharedCacheMode" value="ENABLE_SELECTIVE"/>
    ...
```

캐시 모드는 `javax.persistence.SharedCacheMode`에 정의되어 있다.보통 ENABLE_SELECTIVE를 사용한다.

옵션 종류

| ALL | 모든 엔티티를 캐시한다. |
| --- | --- |
| NONE | 캐시를 사용하지 않는다. |
| ENABLE_SELECTIVE | Cacheable(true)로 설정된 엔티티만 캐시한다. |
| DISABLE_SELECTIVE | 모든 엔티티를 캐시하는데 Cacheable(false)로 명시된 엔티티는 캐시하지 않는다. |
| UNSPECIFIED | JPA 구현체가 정의한 설정을 따른다. |

### 캐시 조회 및 저장 방식 설정

캐시를 무시하고 데이터베이스를 직접 조회하거나 캐시를 갱신하려면, 캐시 조회 모드와 캐시 보관 모드를 사용하면 된다.

```java
em.setProperty("javax.persistence.cache.retrieveMode", CacheRetrieveMode.BYPASS);
```

캐시 조회 모드나 보관 모드에 따라 사용할 프로퍼티와 옵션이 다르다. 

프로퍼티 이름은

- `javax.persistence.cache.retrieveMode`: 캐시 조회 모드 프로퍼티 이름
- `javax.persistence.cache.storeMode`: 캐시 보관 모드 프로퍼티 이름

옵션은

- `javax.persistence.CacheRetrieveMode`: 캐시 조회 모드 설정 옵션
- `javax.persistence.CacheStoreMode`: 캐시 보관 모드 설정 옵션

캐시 조회 및 보관 모드 예시

```java
// 캐시 조회 모드
public enum CacheRetrieveMode {

    USE, // 캐시를 조회한다. 기본값
    BYPASS // 캐시를 무시하고 데이터베이스에 직접 접근한다.
}

// 캐시 보관 모드
public enum CacheStoreMode {

    USE, // 조회한 데이터를 캐시에 저장한다. 이미 캐시에 데이터가 있으면 갱신하지는 않는다.
    BYPASS, // 캐시에 저장하지 않는다.
    REFRESH // USE 전략에 추가로 데이터베이스에서 조회한 엔티티를 최산 상태로 다시 캐시한다.
}
```

캐시모드는 `EntityManager.setProperty()`로 엔티티 매니저 단위로 설정하거나 더 세밀하게 `EntityManager.find(), EntityManager.refresh()`에 설정할 수 있다. 그리고 Query.setHint() (TypeQuery 포함)에 사용할 수 있다.

### JPA 캐시 관리 API

```java
Cache cache = entityManagerFactory.getCache();
boolean contains = cache.contains(TestEntity.class, testEntity.getId());
assertThat(contains).isTrue();
```

캐시 객체는 엔티티 매니저 팩토리에서 얻어 올수 있다.

Cache 인터페이스는 이런 기능들을 제공한다.

- 해당 엔티티가 캐시에 있는지 확인
- 특정 식별자를 가진 엔티티를 캐시에서 제거
- 해당 엔티티 전체를 캐시에서 제거
- 모든 캐시 데이터 제거


## **하이버네이트와 EHCACHE 적용**

하이버네이트가 지원하는 캐시는 크게 3가지 있다

- 엔티티 캐시 : 엔티티 단위로 캐시한다.
    
    → 식별자로 엔티티를 조회하거나 컬렉션이 아닌 연관된 엔티티를 로딩할 때 사용한다.
    
- 컬렉션 캐시 : 엔티티와 연관된 컬렉션을 캐시한다.
    - 컬렉션이 엔티티를 담고 있으면 식별자값만 캐시한다.
- 쿼리 캐시 : 쿼리와 파라미터 정보를 키로 사용해서 캐시한다.
    - 결과가 엔티티면 식별자값만 캐시한다.

설정

하이버네이트에서 EHCACHE를 사용 할려면 라이브러리를 pom.xml에 추가해야한다

```java
<dependency>
	<groupId>org.hibernate</groupId>
    <artifactId>hibernate-ehcache</artifactId>
    <version>4.3.10.Final</version>
</dependency>
```

hibernate-ehcache를 추가하면 net.sf.ehcache-core 라이브러리도 추가된다.

EHCACHE 는 아래와 같이 ehcache.xml를 설정 파일로 사용한다. 

이 설정 파일은 캐시를 얼마만큼 보관할지, 얼마 동안 보관할지와 같은 캐시 정책을 정의하는 설정파일이다. 

이 파일은 src/main/resources에 둔다.

```java
<ehcache>
	<defaultCache
    	maxElementsInMemory="10000"
        eternal="false"
        timeToIdleSeconds="1200"
        timeToLiveSeconds="1200"
        diskExpiryThreadIntervalSeconds="1200"
        memoryStoreEvictionPolicy="LRU"
        />
</ehcache>
```

다음으로 하이버네이트에 캐시 사용정보를 설정한다.

persistence.xml에 캐시 정보를 추가한다.

```java
<persistence-unit name="test">
	<shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>
    <properties>
    	<property name="hibernate.cache.use_second_level_cache" value="true"/>
        <property name="hibernate.cache.use_query_cache" value="true"/>
        <property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
        <property name="hibernate.generate_statistics" value="true"/>
   </properties>
   ...
</persistence-unit?
```

여기에 

hibernate.cache.use_second_level_cache : 2차 캐시 활성화. 엔티티 캐시와 컬렉션 캐시를 사용할 수 있다.

hibernate.cache.use_query_cache : 쿼리 캐시를 활성화

hibernate.cache.region.factory_class : 2차 캐시를 처리할 클래스를 지정한다. 

여기서는 EHCAHCE를 사용하므로 `org.hibernate.cache.ehcache.EhCacheRegionFactory`를 적용한다.

hibernate.generate_statistics : 이 속성을 true로 설정하면 하이버네이트가 여러 통계정보를 출력해주는데 캐시 적용 여부를 확인할 수 있다. 

성능에 영향을 주므로 개발 환경에서만 적용하는 것이 좋다.

### 엔티티 캐시와 컬렉션 캐시

```java
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE) // 엔티티 캐시
@Entity
public class ParentMember {

    @Id
    @GeneratedValue
    private Long id;

    private String name;

    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE) // 컬렉션 캐시
    @OneToMany(mappedBy = "parentMember", cascade = CascadeType.ALL)
    private List<ChildMember> childMembers = new ArrayList<ChildMember>();

    ...
}
```

@Cache 옵션은

- usage : CacheConcurrencyStrategy를 사용해서 캐시 동시성 전략을 설정한다.
- region : 캐시 지역 설정
- include : 연관 객체를 캐시에 포함할지 선택한다.

가장 중요한건 캐시 동시성 전략을 설정하는 usage 옵션이다

종류는

| NONE | 캐시를 설정하지 않는다. |
| --- | --- |
| READ_ONLY | 읽기 전용으로 설정한다. 등록, 삭제는 가능하지만 수정은 불가능하다. 참고로 읽기 전용인 불변 객체는 수정되지 않으므로 하이버네이트는 2차 캐시를 조회할 때 객체를 복사하지 않고 원본 객체를 반환한다. |
| NONSTRICT_READ_WRITE | 엄격하지 않은 읽고 쓰기 전략이다. 동시에 같은 엔티티를 수정하면 데이터 일관성이 깨질 수 있다. EHCACHE는 데이터를 수정하면 캐시 데이터를 무효화한다. |
| READ_WRITE | 읽기 쓰기가 가능하고 READ_COMMITED 정도의 격리 수준을 보장한다. EHCACHE는 데이터를 수정하면 캐시 데이터도 같이 수정한다. |
| TRANSACTIONAL | 컨테이너 관리 환경에서 사용한다. 설정에 따라 REPEATABLE READ 정도의 격리 수준을 보장받을 수 있다. |

### **캐시 영역**

엔티티 캐시 영역은 기본 값으로 [패키지 명 + 클래스 명]을 사용하고, 컬렉션 캐시 영역은 엔티티 캐시 영역 이름에 캐시한 컬렉션 필드 명이 추가된다.

필요하다면 @Cache(region="customRegion",~~~~)이거 처럼 region 속성을 이용해 캐시 영역을 직접 지정할 수 있다.

접두사 설정할거면 persistence.xml 설정에 hibernate.cache.region_prefix를 사용하면 된다.

### 쿼리 캐시

쿼리 캐시는 쿼리와 파라미터 정보를 키로 사용해 쿼리 결과를 캐시하는 방법이다.

쿼리 캐시를 적용하려면 영속성 유닛 설정에 hibernate.cache.use_query_cache 옵션을 true로 해야하고, 쿼리 캐시를 적용하려는 쿼리마다 cachealbe을 true로 설정하는 힌트를 줘야한다.

그리고 쿼리 캐시는 캐시한 데이터 집합을 최신 데이터로 유지 할려고 쿼리 캐시를 실행하는 시간과 쿼리 캐시가 사용하는 테이블들이 가장 최근에 변경된 시간을 비교한다.

쿼리 캐시를 적용하고 난 후에 쿼리 캐시가 사용하는 테이블에 조금이라도 변경이 있으면 데이터베이스에서 데이터를 읽어와 쿼리 결과를 다시 캐시한다.

### 쿼리 캐시와 컬렉션 캐시 주의사항

쿼리 캐시와 컬렉션 캐시는 결과 집합의 식별자 값만 캐시한다. 

따라서 쿼리 캐시나 컬렉션 캐시만 사용하고, 대상 엔티티에 엔티티 캐시를 적용하지 않으면 성능이 매우 떨어진다.

예를들면

 `select m from Member m` 쿼리를 했는데 쿼리 캐시가 적용되고, 결과는 100이다

결과 집합에는 식별자만 있기에 한건씩 엔티티 캐시 영역에서 조회하면, Member 엔티티에는 엔티티 캐시를 사용하지 않으므로 한건 씩 데이터베이스에서 조회한다.

결국엔 100건의 SQL 쿼리가 실행된다.

그래서 쿼리 캐시나 컬렉션 캐시만 사용하고 엔티티 캐시를 사용하지 않으면 최악의 상황에 결과 집합 수 만큼 실행된다. 

따라서 쿼리 캐시나 컬렉션 캐시를 사용하면 결과 대상 엔티티에 꼭 엔티티 캐시를 적용해야 한다.

# 참고

[https://velog.io/@mbsik6082/트랜잭션과-락-2차-캐시](https://velog.io/@mbsik6082/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC-%EB%9D%BD-2%EC%B0%A8-%EC%BA%90%EC%8B%9C)

https://steady-coding.tistory.com/607
